name: CI

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - master

    # Publish `1.2.3` tags as releases.
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+rc[0-9]+'

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: agent

jobs:
  debug:
    runs-on: ubuntu-16.04
    steps:
    #- name: Add permissions to DNS lookup files
    #  run: |
    #    chmod 644 /etc/hosts
    #    chmod 644 /etc/resolve.conf
    #- run: echo "127.0.0.1 console.example.com" >> /etc/resolv.conf
    - run: cat /etc/resolv.conf

  run-tests:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.8'
    - run: python --version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Checking the code syntax
      run: |
        pylama chaosiqagent
    - name: Run tests
      run: |
        pip install -e .
        pytest tests/

  build-docker-image:
    runs-on: ubuntu-16.04
    needs:
      - run-tests
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v2

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag $IMAGE_NAME

    - name: Log into Docker Hub
      env:
        DOCKER_USER_NAME: chaosiq
        DOCKER_PWD: ${{ secrets.DOCKER_PWD }}
      run: |
        docker login -u ${DOCKER_USER_NAME} -p ${DOCKER_PWD}

    - name: Push image to Docker Hub Registry
      run: |
        IMAGE_ID=chaosiq/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
